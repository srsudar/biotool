/* global describe, it, assert, sequenceFunctions */

(function() {
    'use strict';

    var functions = sequenceFunctions;

    describe('reverse', function() {
        
        it('Exists and is a function', function() {
            assert.isFunction(functions.getReverse);
        });

        it('Returns same value for single character', function() {
            var target = 'a';
            var toReverse = 'a';
            var actual = functions.getReverse(toReverse);
            assert.equal(
                actual,
                target);
        });

        it('Reverses short sequence', function() {
            var toReverse = 'this should be reversed quite easily';
            var target = 'ylisae etiuq desrever eb dluohs siht';
            var actual = functions.getReverse(toReverse);
            assert.equal(
                actual,
                target);
        });

    });

    describe('getComplementMap', function() {

        it('Exists and is a function', function() {
            assert.isFunction(functions.getComplementMap);
        });

        it('Returns object with correct complement pairs', function() {
            // We just want to make sure that we have all the keys pairing to
            // the right values. We are going to keep case the same and for the
            // time being just never produce a u. We can consume u, however,
            // just matching it to t.
            var map = functions.getComplementMap();
            // This function will just assert that base is equal to the
            // complement as produced by map.
            var assertBaseToComplement = function(base, complement) {
                var target = complement;
                var actual = map[base];
                assert.equal(
                    actual,
                    target,
                    base + ' should pair with ' + complement);
            };
            assertBaseToComplement('a', 't');
            assertBaseToComplement('t', 'a');
            assertBaseToComplement('c', 'g');
            assertBaseToComplement('g', 'c');
            assertBaseToComplement('A', 'T');
            assertBaseToComplement('T', 'A');
            assertBaseToComplement('C', 'G');
            assertBaseToComplement('G', 'C');
            assertBaseToComplement('u', 'a');
            assertBaseToComplement('U', 'A');
        });

    });

    describe('getComplement', function() {

        it('complements simple string correctly matching case', function() {
            var original = 'atcgATCGuU';
            var target = 'tagcTAGCaA';
            var actual = functions.getComplement(original);
            assert.equal(
                actual,
                target,
                actual + ' is not complement of ' + original);
        });

        it('complements longer sequence correctly', function() {
            // This isn't stricly necessary and is really just a sanity check.
            // We're going to make sure that with a long sequence we get the
            // real deal.
            var oct4 =
    'GAGGTGAAACCGTCCCTAGGTGAGCCGTCTTTCCACCAGGCCCCCGGCTCGGGGTGCCCACCTTCCCCAT' +
    'GGCTGGACACCTGGCTTCAGACTTCGCCTTCTCACCCCCACCAGGTGGGGGTGATGGGTCAGCAGGGCTG' +
    'GAGCCGGGCTGGGTGGATCCTCGAACCTGGCTAAGCTTCCAAGGGCCTCCAGGTGGGCCTGGAATCGGAC' +
    'CAGGCTCAGAGGTATTGGGGATCTCCCCATGTCCGCCCGCATACGAGTTCTGCGGAGGGATGGCATACTG' +
    'TGGACCTCAGGTTGGACTGGGCCTAGTCCCCCAAGTTGGCGTGGAGACTTTGCAGCCTGAGGGCCAGGCA' +
    'GGAGCACGAGTGGAAAGCAACTCAGAGGGAACCTCCTCTGAGCCCTGTGCCGACCGCCCCAATGCCGTGA' +
    'AGTTGGAGAAGGTGGAACCAACTCCCGAGGAGGTAAGTGAAGGGACTTGGCTGGGCTGGCAGAGGCAGCA' +
    'GTGAAGGGAATTGGGAACATGTAGGGTAGCCACCCTGCCTGCCAAAGGTGGTGATGGCTGCCGGGCCTCC' +
    'TGAGAAGCACGACGCAGTGTGGACTAGAACCCAGAATTGCAAGAATCAGAAACCGGCCTGGATTGTTTCG' +
    'GCCTGGCCCTTGTCATGTAGGTCACCTAGGCCTGGCCTGTGTCCCGACACTTGCTTCATGCCATCACTGT' +
    'CTGTACACCAGTGATGCGTGAAAATCAGCCCCCCCCCAAAAAAAAAAACATATCAGCCCCTCTGGGGACT' +
    'TGGATCACAGTCGGACCCAGGAACTTGGCCTTAAGGTTAGGCATGGCTGGGGGGGTAAAAAATGGTGCTT' +
    'ATCCTGGAGTTATTGTTACTGAAGAGGTTGGGTGTGACTGGCTGCTGATAGGAGCTCTTGTTTGGGCCAT' +
    'GTGTGGAGTAGGGCTCACCTTCAGTCAAGTTTACGGCCTGTCTACTTTAGCCTCAGACTCCATGAGTCAC' +
    'CTTTACACGAGCAGACCCTTGTAGTGCCTGAGGTGCAGATCTGATCGATTTCAGCCTTTCTACCTTTCCT' +
    'TGTAAACAAGAAAGGGACACCCTTGGGTAGGGGAGTTTTATCTCCAGGCCATCTTAAGATCATTCTGTGA' +
    'GTGCACGGGCCTTGCTTAGTGTCTGATGGCCTACAGCCAGCACTCTGGAGCAAGTGTAAGCAATTAGCCT' +
    'TAAGAACAAGGTGCGAGTGGATACCGATGCCCGCCGGGAGTTCCGACAGCTTAGCGATTGTTGTAGCAGG' +
    'AGTCCCCTCCCTAAGTGCCAGTTTCTGTGTTATCTCAGGTCCTGTATGCCGCCGGGAGTCCCCTAGGAAG' +
    'GCATTAATAGTTTATCTCACATCTTAAATGGCCCTTAATGAAGCAAGAGATTTGAACCTTAGTTAAGCTA' +
    'ATCCCAAATCCTCAAAATAGGATTTAGAAAAGCCAAAGACACTGCTGAGGGCGATTACAAGTTTTGGTCT' +
    'TTTGAGGAGCAGTTGGAGATGAAAGTCTGTCTGAAGCCGAGAGAATCCTTTTCCATTGAAATGGCATTGA' +
    'GGTGTGCCTCACTGGCTGCTGCTTCTGTCTGTGCCCTGGGTTGGCCAGCCTTTGTGGAGCACCTCAGCCC' +
    'TCCATCCTGGACCTTTGCTCCAACAACCTGCTCCTCTTCCGCCCTCAAGGCTGACTTGCATCTCCCCAGA' +
    'TGACTGCCTCCATTTCTGTCTTCTGTTAGAGACAGAAAAGCCTGAGAAACCGACAGCCATTTTGGGGGGG' +
    'GGGGGTCCGGTTCACACGCTGCAACTTAGAAAGCACACTCAACTGGCCATCTGTTATACCCTCCCCACCT' +
    'GGTCCCAACCATCACTGTGTACTACTGAGAAGAAGGCAGCCTTAGCCACACCCTCGAGTGCCCCTGCCGT' +
    'TCTATTGCTCATACATCGATTGATATCCCTGTTTCAACTTTGAAAAAAAAAAATTTTTTTTTTTTTGTGG' +
    'TGTGTGCATGCCTGCTACTGTACACCTGTGGGCGTCAGAGGTGGTCCTCTGCACCCTCCGGCCAGTACCG' +
    'CATCCAGGGTGAGTCAGATGATTTCCTGTGGTTTGGGCCTCAAGGCTTCTCACCTCCAGAGGCTTCTAGC' +
    'CTGCTGCCTTGCTTTCTCTGTCGCACTCTAGTACAGCAGGAGTTTTCTTCGCACTCCGGAGTGTTGTCAG' +
    'CTCCTGGGGCATGGACATTTGGCTACTTAGAGTGTGCTGTGTAGGTTTTCATTTAGAGCTGAACAGAGGG' +
    'ATGGATCTTATTACCCCAGCCCTTGAGACACTGAGGCAGGAGAGCTTCCTAGTGAGTCCCTGTTTCAATA' +
    'TCTTCACTAATACTGTGTCATACTTTGGGACTTTCTTTCTTCCTTTCTTTCTTTTGATTTTTTTTTTTTT' +
    'TATATGAGTACAGTGTACCTGTCTTCAGACACACACCAGAAGAGGGCATCAGATCCTACTACAGAAGGTT' +
    'GTGAGCCACCTTGTGGTTGCTGGGAATTGAACTCCGGATCTCCGGAAGAGAAGTCCGTATACCAACTTCT' +
    'GTATTAGTCAGGGTTCTCTAGAGTCACAGAACTTATGGACAGTCTCTAGATAGTAAAGGAATTTATTGAT' +
    'GACTTACAGTCGGCAGCCCAATTCCCAACAATGGTTCAGTCGCAGCTGTGAATGGAAGTCCAAGGATCTA' +
    'GCAGTTACTTAGTCTCACGCAGCAAGCAGGCGAAGGAGCAAGAGCTAGAGCTTAACTGCTGAGCCATGTG' +
    'TTTCTTGAGTAAAGGGATTACATGCTCGTTCGTCTGGTCAATTCTGCAGCCTTAAAACTTCTTCAGAATA' +
    'GGGTGACATTTTGTCCTCAGTGGGGCGGTTTTGAGTAATCTGTGAGCAGATAGGAACTTGCTGGGGTACT' +
    'GCACAGAACTCTGGGTAGTGTGGTACTGTAGATGGCTAGGTTCTGGGGGGGGAAAGAGCCATCTATGTCA' +
    'CCTAGGAATAGAGTGAATAACATTTATATAATCAGACCAGCCCTTGAGGAGGCTGAGATCTTTTCATGGG' +
    'GCACCCTAGGGTCACAGTCCCAGCTGGTGTGACTCTGACAAGTCTGCCTTTCTCACTACAGTCCCAGGAC' +
    'ATGAAAGCCCTGCAGAAGGAGCTAGAACAGTTTGCCAAGCTGCTGAAGCAGAAGAGGATCACCTTGGGGT' +
    'ACACCCAGGCCGACGTGGGGCTCACCCTGGGCGTTCTCTTTGGTGGGTCTCCCCCAGCATGTTCTGATCT' +
    'CACGGCTCTTAATGTAGGCGCAAGGGGGTGGGGCATCTTAGGAGCTGCTTCTCCACAGGTAAGGGAGGAT' +
    'TAGACGCTTGTAGCTTGAACTGTCAGAGGTGGGGGCTTGGGCTCCCTTCTTGCTGCCTCACTCACTCTGT' +
    'TTGATCGGCCTTTCAGGAAAGGTGTTCAGCCAGACCACCATCTGTCGCTTCGAGGCCTTGCAGCTCAGCC' +
    'TTAAGAACATGTGTAAGCTGCGGCCCCTGCTGGAGAAGTGGGTGGAGGAAGCCGACAACAATGAGAACCT' +
    'TCAGGAGGTGAGGAGTGGCAGGATGTGTGCAATGTCTGCCAGGCACAGTCCCTTCTGCTGCTTCCATTCC' +
    'TGGCTTGAAACTCCTCCCTCTCCAACCGGAGCTCGCAGGAGAAGTTCTGTGTCCTTATTCTGCTGCTATG' +
    'AATTGGAATCCAGAGCCTTAACATTTGCTAATCAATCAGGCTCTCTCCTTCTGAGTCACCCTCTGCCCCC' +
    'ACCAGCCTGACAATGGTCCCTCCCCAGAACCCCGTCTAGTGCTGGTGAAGGCTCAGACCTAGGTCTACCA' +
    'GCCCCTTCCAGAGCCCCTTTCAGTAACCCCTGGCTCTGGGGCCACATCCAGTCAATGCTCCCTTAGCACA' +
    'ATCCCTTAGCGGTTTGTTCTTCAGTCCCATCTCAAGGTGGGGCTGTTGCCAAGTCAAATACTAAAGTTGC' +
    'TCTTGTCGCCCCCATCTTCCCCTGCCCAGATATGCAAATCGGAGACCCTGGTGCAGGCCCGGAAGAGAAA' +
    'GCGAACTAGCATTGAGAACCGTGTGAGGTGGAGTCTGGAGACCATGTTTCTGAAGTGCCCGAAGCCCTCC' +
    'CTACAGCAGATCACTCACATCGCCAATCAGCTTGGGCTAGAGAAGGATGTGAGTGCCAAGATCCTGCCCT' +
    'GTGGTACCTGGATGTTTCCCTGTTCCCATTCCCCACCCCCCCCACCCCCCCACCCCCACCGCCGCCACCG' +
    'CTGACTGCAGCATCCCAGAGCTTATGATCTGATGTCCATCTCTGTGCCCATCCTAGGTGGTTCGAGTATG' +
    'GTTCTGTAACCGGCGCCAGAAGGGCAAAAGATCAAGTATTGAGTATTCCCAACGAGAAGAGTATGAGGCT' +
    'ACAGGGACACCTTTCCCAGGGGGGGCTGTATCCTTTCCTCTGCCCCCAGGTCCCCACTTTGGCACCCCAG' +
    'GCTATGGAAGCCCCCACTTCACCACACTCTACTCAGTCCCTTTTCCTGAGGGCGAGGCCTTTCCCTCTGT' +
    'TCCCGTCACTGCTCTGGGCTCTCCCATGCATTCAAACTGAGGCACCAGCCCTCCCTGGGGATGCTGTGAG' +
    'CCAAGGCAAGGGAGGTAGACAAGAGAACCTGGAGCTTTGGGGTTAAATTCTTTTACTGAGGAGGGATTAA' +
    'AAGCACAACAGGGGTGGGGGGTGGGATGGGGAAAGAAGCTCAGTGATGCTGTTGATCAGGAGCCTGGCCT' +
    'GTCTGTCACTCATCATTTTGTTCTTAAATAAAGACTGGGACACACAGTAGATAGCT';
            var target =
    'CTCCACTTTGGCAGGGATCCACTCGGCAGAAAGGTGGTCCGGGGGCCGAGCCCCACGGGTGGAAGGGGTA' +
    'CCGACCTGTGGACCGAAGTCTGAAGCGGAAGAGTGGGGGTGGTCCACCCCCACTACCCAGTCGTCCCGAC' +
    'CTCGGCCCGACCCACCTAGGAGCTTGGACCGATTCGAAGGTTCCCGGAGGTCCACCCGGACCTTAGCCTG' +
    'GTCCGAGTCTCCATAACCCCTAGAGGGGTACAGGCGGGCGTATGCTCAAGACGCCTCCCTACCGTATGAC' +
    'ACCTGGAGTCCAACCTGACCCGGATCAGGGGGTTCAACCGCACCTCTGAAACGTCGGACTCCCGGTCCGT' +
    'CCTCGTGCTCACCTTTCGTTGAGTCTCCCTTGGAGGAGACTCGGGACACGGCTGGCGGGGTTACGGCACT' +
    'TCAACCTCTTCCACCTTGGTTGAGGGCTCCTCCATTCACTTCCCTGAACCGACCCGACCGTCTCCGTCGT' +
    'CACTTCCCTTAACCCTTGTACATCCCATCGGTGGGACGGACGGTTTCCACCACTACCGACGGCCCGGAGG' +
    'ACTCTTCGTGCTGCGTCACACCTGATCTTGGGTCTTAACGTTCTTAGTCTTTGGCCGGACCTAACAAAGC' +
    'CGGACCGGGAACAGTACATCCAGTGGATCCGGACCGGACACAGGGCTGTGAACGAAGTACGGTAGTGACA' +
    'GACATGTGGTCACTACGCACTTTTAGTCGGGGGGGGGTTTTTTTTTTTGTATAGTCGGGGAGACCCCTGA' +
    'ACCTAGTGTCAGCCTGGGTCCTTGAACCGGAATTCCAATCCGTACCGACCCCCCCATTTTTTACCACGAA' +
    'TAGGACCTCAATAACAATGACTTCTCCAACCCACACTGACCGACGACTATCCTCGAGAACAAACCCGGTA' +
    'CACACCTCATCCCGAGTGGAAGTCAGTTCAAATGCCGGACAGATGAAATCGGAGTCTGAGGTACTCAGTG' +
    'GAAATGTGCTCGTCTGGGAACATCACGGACTCCACGTCTAGACTAGCTAAAGTCGGAAAGATGGAAAGGA' +
    'ACATTTGTTCTTTCCCTGTGGGAACCCATCCCCTCAAAATAGAGGTCCGGTAGAATTCTAGTAAGACACT' +
    'CACGTGCCCGGAACGAATCACAGACTACCGGATGTCGGTCGTGAGACCTCGTTCACATTCGTTAATCGGA' +
    'ATTCTTGTTCCACGCTCACCTATGGCTACGGGCGGCCCTCAAGGCTGTCGAATCGCTAACAACATCGTCC' +
    'TCAGGGGAGGGATTCACGGTCAAAGACACAATAGAGTCCAGGACATACGGCGGCCCTCAGGGGATCCTTC' +
    'CGTAATTATCAAATAGAGTGTAGAATTTACCGGGAATTACTTCGTTCTCTAAACTTGGAATCAATTCGAT' +
    'TAGGGTTTAGGAGTTTTATCCTAAATCTTTTCGGTTTCTGTGACGACTCCCGCTAATGTTCAAAACCAGA' +
    'AAACTCCTCGTCAACCTCTACTTTCAGACAGACTTCGGCTCTCTTAGGAAAAGGTAACTTTACCGTAACT' +
    'CCACACGGAGTGACCGACGACGAAGACAGACACGGGACCCAACCGGTCGGAAACACCTCGTGGAGTCGGG' +
    'AGGTAGGACCTGGAAACGAGGTTGTTGGACGAGGAGAAGGCGGGAGTTCCGACTGAACGTAGAGGGGTCT' +
    'ACTGACGGAGGTAAAGACAGAAGACAATCTCTGTCTTTTCGGACTCTTTGGCTGTCGGTAAAACCCCCCC' +
    'CCCCCAGGCCAAGTGTGCGACGTTGAATCTTTCGTGTGAGTTGACCGGTAGACAATATGGGAGGGGTGGA' +
    'CCAGGGTTGGTAGTGACACATGATGACTCTTCTTCCGTCGGAATCGGTGTGGGAGCTCACGGGGACGGCA' +
    'AGATAACGAGTATGTAGCTAACTATAGGGACAAAGTTGAAACTTTTTTTTTTTAAAAAAAAAAAAACACC' +
    'ACACACGTACGGACGATGACATGTGGACACCCGCAGTCTCCACCAGGAGACGTGGGAGGCCGGTCATGGC' +
    'GTAGGTCCCACTCAGTCTACTAAAGGACACCAAACCCGGAGTTCCGAAGAGTGGAGGTCTCCGAAGATCG' +
    'GACGACGGAACGAAAGAGACAGCGTGAGATCATGTCGTCCTCAAAAGAAGCGTGAGGCCTCACAACAGTC' +
    'GAGGACCCCGTACCTGTAAACCGATGAATCTCACACGACACATCCAAAAGTAAATCTCGACTTGTCTCCC' +
    'TACCTAGAATAATGGGGTCGGGAACTCTGTGACTCCGTCCTCTCGAAGGATCACTCAGGGACAAAGTTAT' +
    'AGAAGTGATTATGACACAGTATGAAACCCTGAAAGAAAGAAGGAAAGAAAGAAAACTAAAAAAAAAAAAA' +
    'ATATACTCATGTCACATGGACAGAAGTCTGTGTGTGGTCTTCTCCCGTAGTCTAGGATGATGTCTTCCAA' +
    'CACTCGGTGGAACACCAACGACCCTTAACTTGAGGCCTAGAGGCCTTCTCTTCAGGCATATGGTTGAAGA' +
    'CATAATCAGTCCCAAGAGATCTCAGTGTCTTGAATACCTGTCAGAGATCTATCATTTCCTTAAATAACTA' +
    'CTGAATGTCAGCCGTCGGGTTAAGGGTTGTTACCAAGTCAGCGTCGACACTTACCTTCAGGTTCCTAGAT' +
    'CGTCAATGAATCAGAGTGCGTCGTTCGTCCGCTTCCTCGTTCTCGATCTCGAATTGACGACTCGGTACAC' +
    'AAAGAACTCATTTCCCTAATGTACGAGCAAGCAGACCAGTTAAGACGTCGGAATTTTGAAGAAGTCTTAT' +
    'CCCACTGTAAAACAGGAGTCACCCCGCCAAAACTCATTAGACACTCGTCTATCCTTGAACGACCCCATGA' +
    'CGTGTCTTGAGACCCATCACACCATGACATCTACCGATCCAAGACCCCCCCCTTTCTCGGTAGATACAGT' +
    'GGATCCTTATCTCACTTATTGTAAATATATTAGTCTGGTCGGGAACTCCTCCGACTCTAGAAAAGTACCC' +
    'CGTGGGATCCCAGTGTCAGGGTCGACCACACTGAGACTGTTCAGACGGAAAGAGTGATGTCAGGGTCCTG' +
    'TACTTTCGGGACGTCTTCCTCGATCTTGTCAAACGGTTCGACGACTTCGTCTTCTCCTAGTGGAACCCCA' +
    'TGTGGGTCCGGCTGCACCCCGAGTGGGACCCGCAAGAGAAACCACCCAGAGGGGGTCGTACAAGACTAGA' +
    'GTGCCGAGAATTACATCCGCGTTCCCCCACCCCGTAGAATCCTCGACGAAGAGGTGTCCATTCCCTCCTA' +
    'ATCTGCGAACATCGAACTTGACAGTCTCCACCCCCGAACCCGAGGGAAGAACGACGGAGTGAGTGAGACA' +
    'AACTAGCCGGAAAGTCCTTTCCACAAGTCGGTCTGGTGGTAGACAGCGAAGCTCCGGAACGTCGAGTCGG' +
    'AATTCTTGTACACATTCGACGCCGGGGACGACCTCTTCACCCACCTCCTTCGGCTGTTGTTACTCTTGGA' +
    'AGTCCTCCACTCCTCACCGTCCTACACACGTTACAGACGGTCCGTGTCAGGGAAGACGACGAAGGTAAGG' +
    'ACCGAACTTTGAGGAGGGAGAGGTTGGCCTCGAGCGTCCTCTTCAAGACACAGGAATAAGACGACGATAC' +
    'TTAACCTTAGGTCTCGGAATTGTAAACGATTAGTTAGTCCGAGAGAGGAAGACTCAGTGGGAGACGGGGG' +
    'TGGTCGGACTGTTACCAGGGAGGGGTCTTGGGGCAGATCACGACCACTTCCGAGTCTGGATCCAGATGGT' +
    'CGGGGAAGGTCTCGGGGAAAGTCATTGGGGACCGAGACCCCGGTGTAGGTCAGTTACGAGGGAATCGTGT' +
    'TAGGGAATCGCCAAACAAGAAGTCAGGGTAGAGTTCCACCCCGACAACGGTTCAGTTTATGATTTCAACG' +
    'AGAACAGCGGGGGTAGAAGGGGACGGGTCTATACGTTTAGCCTCTGGGACCACGTCCGGGCCTTCTCTTT' +
    'CGCTTGATCGTAACTCTTGGCACACTCCACCTCAGACCTCTGGTACAAAGACTTCACGGGCTTCGGGAGG' +
    'GATGTCGTCTAGTGAGTGTAGCGGTTAGTCGAACCCGATCTCTTCCTACACTCACGGTTCTAGGACGGGA' +
    'CACCATGGACCTACAAAGGGACAAGGGTAAGGGGTGGGGGGGGTGGGGGGGTGGGGGTGGCGGCGGTGGC' +
    'GACTGACGTCGTAGGGTCTCGAATACTAGACTACAGGTAGAGACACGGGTAGGATCCACCAAGCTCATAC' +
    'CAAGACATTGGCCGCGGTCTTCCCGTTTTCTAGTTCATAACTCATAAGGGTTGCTCTTCTCATACTCCGA' +
    'TGTCCCTGTGGAAAGGGTCCCCCCCGACATAGGAAAGGAGACGGGGGTCCAGGGGTGAAACCGTGGGGTC' +
    'CGATACCTTCGGGGGTGAAGTGGTGTGAGATGAGTCAGGGAAAAGGACTCCCGCTCCGGAAAGGGAGACA' +
    'AGGGCAGTGACGAGACCCGAGAGGGTACGTAAGTTTGACTCCGTGGTCGGGAGGGACCCCTACGACACTC' +
    'GGTTCCGTTCCCTCCATCTGTTCTCTTGGACCTCGAAACCCCAATTTAAGAAAATGACTCCTCCCTAATT' +
    'TTCGTGTTGTCCCCACCCCCCACCCTACCCCTTTCTTCGAGTCACTACGACAACTAGTCCTCGGACCGGA' +
    'CAGACAGTGAGTAGTAAAACAAGAATTTATTTCTGACCCTGTGTGTCATCTATCGA';
            var actual = functions.getComplement(oct4);
            assert.equal(
                  actual,
                  target);
        });

    });

})();
